{
  "Description": "Simple Auto-scaling Linux Template for AWS Blue-Green deployments using AWS Code Deploy. This template creates a Load Balancer, assigns a Load Balancer Security Group to the ELB, creates an Auto Scaling Launch Configuration, Creates and Auto Scaling Group, creates an instance Security Group with an ingress from the Load Balancer Security Group, Creates all the roles needed for Code Depploy to Work and launches Two EC2 Linux Servers and Bootstraps them with the AWS Code Deploy Agent. Fits in your existing VPC Infrastrcuture however AWS code Deploy does require AWS API connectivity",
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
      
    "VpcId" : {
      "Type" : "AWS::EC2::VPC::Id",
      "Description" : "VpcId of your existing Virtual Private Cloud (VPC)",
      "ConstraintDescription" : "must be the VPC Id of an existing Virtual Private Cloud."
    },

    "Subnets" : {
      "Type" : "List<AWS::EC2::Subnet::Id>",
      "Description" : "The list of SubnetIds in your Virtual Private Cloud (VPC)",
      "ConstraintDescription" : "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
    },
    "LoadBalancerName": {
      "Description": "The name of the load balancer.",
      "Default": "my-web-app-elb",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "32",
      "ConstraintDescription": "Must contain only alphanumeric characters or hyphens, and cannot begin or end with a hyphen. Must have a maximum of 32 characters."
    },
    "ServiceRoleName": {
      "Description": "The name of the service role.",
      "Default": "code-deploy-blue-green-role",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "ConstraintDescription": "Must contain only alphanumeric characters or hyphens, and cannot begin or end with a hyphen."
    },
    "KeyPairName": {
      "Description": "Name of an existing Amazon EC2 key pair to enable SSH or RDP access to the instances.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "Can contain only ASCII characters."
    },
    "InstanceCount": {
      "Description": "Number of Amazon EC2 instances in an autoscaling group.",
      "Type": "Number",
      "Default": "2",
      "ConstraintDescription": "Must be a number between 1 and 3.",
      "MinValue": "2",
      "MaxValue": "3"
    },
    "SSHLocation": {
      "Description": "Your IP address that can be used to connect using SSH or RDP to the Amazon EC2 instances.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "192.168.0.1/32",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "SecurityGroup": {
      "Description": "Security Group for your Load Balancer",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    }
  },
  "Mappings": {
    "RegionOS2AMI": {
      "us-east-1": {
        "Linux": "ami-b73b63a0"
      },
      "us-west-2": {
        "Linux": "ami-5ec1673e"
      },
      "eu-west-1": {
        "Linux": "ami-9398d3e0"
      },
      "ap-southeast-2": {
        "Linux": "ami-db704cb8"
      },
      "ap-southeast-1": {
        "Linux": "ami-b953f2da"
      },
      "ap-south-1": {
        "Linux": "ami-34b4c05b"
      },
      "cn-north-1": {
        "Linux": "ami-8e6aa0e3"
      },
      "cn-northwest-1": {
        "Linux": "ami-9e606bfc"
      },
      "us-east-2": {
        "Linux": "ami-58277d3d"
      },
      "us-west-1": {
        "Linux": "ami-23e8a343"
      },
      "eu-central-1": {
        "Linux": "ami-f9619996"
      },
      "ap-northeast-1": {
        "Linux": "ami-0c11b26d"
      },
      "sa-east-1": {
        "Linux": "ami-97831ffb"
      },
      "eu-west-2": {
        "Linux": "ami-d6cbc1b2"
      },
      "eu-west-3": {
        "Linux": "ami-17c6736a"
      },
      "ca-central-1": {
        "Linux": "ami-b48b39d0"
      },
      "ap-northeast-2": {
        "Linux": "ami-983ce8f6"
      },
      "ap-northeast-3": {
        "Linux": "ami-e8e5e895"
      },
      "us-gov-west-1": {
        "Linux": "ami-700a8f11"
      },
      "us-iso-east-1": {
        "Linux": "ami-74c33f63"
      }
    }
  },
  "Resources": {
    "WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "WaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Properties": {
        "Count": {
          "Ref": "InstanceCount"
        },
        "Handle": {
          "Ref": "WaitHandle"
        },
        "Timeout": "1800"
      }
    },
    "CodeDeployTrustRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "1",
              "Effect": "Allow",
              "Principal": {
                "Service": "codedeploy.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "RoleName": {
          "Ref": "ServiceRoleName"
        }
      }
    },
    "CodeDeployRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CodeDeployPolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Action": [
                "ec2:Describe*",
                "ec2:TerminateInstances"
              ]
            },
            {
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Action": [
                "autoscaling:*"
              ]
            },
            {
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Action": [
                "elasticloadbalancing:*",
              ]
            },
            {
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Action": [
                "Tag:getResources",
                "Tag:getTags",
                "Tag:getTagsForResource",
                "Tag:getTagsForResourceList"
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CodeDeployTrustRole"
          }
        ]
      }
    },
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "InstanceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "InstanceRole",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "autoscaling:*",
                "cloudformation:Describe*",
                "cloudformation:GetTemplate",
                "s3:Get*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "InstanceRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "ClassicLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "LoadBalancerName": {
          "Ref": "LoadBalancerName"
        },
        "Subnets": {"Ref": "Subnets"},
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "8080",
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:8080/",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "5",
          "Interval": "10",
          "Timeout": "5"
        },
        "SecurityGroups": {"Ref": "SecurityGroup"}
      }
    },
    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access and HTTP from the load balancer only",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : { "Ref" : "SSHLocation"}
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : "8080",
          "ToPort" : "8080",
          "SourceSecurityGroupId" : {"Fn::Select" : [0, {"Ref": "SecurityGroup"}]}
        } ],
        "VpcId" : { "Ref" : "VpcId" }
      },
    "DependsOn" : "ClassicLoadBalancer"
    },
    "BlueGreenLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "InstanceRoleInstanceProfile"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionOS2AMI",
            {
              "Ref": "AWS::Region"
            },
            "Linux"
          ]
        },
        "InstanceType": "t2.micro",
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "SecurityGroups": [
          {
            "Ref": "InstanceSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex\n",
                "yum install -y aws-cfn-bootstrap\n",
                "yum install -y ruby\n",
                "yum install -y aws-cli\n",
                "# Helper function.\n",
                "function error_exit\n",
                "{\n",
                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '",
                {
                  "Ref": "WaitHandle"
                },
                "'\n",
                "  exit 1\n",
                "}\n",
                "# Install the AWS CodeDeploy Agent.\n",
                "cd /home/ec2-user/\n",
                "aws configure set default.s3.signature_version s3v4 || error_exit 'Failed to set aws cli signature to version 4'\n",
                "aws s3 cp 's3://aws-codedeploy-us-east-1/latest/codedeploy-agent.noarch.rpm' . --region us-east-1 || error_exit 'Failed to download AWS CodeDeploy Agent.'\n",
                "yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed to install AWS CodeDeploy Agent.' \n",
                "# All is well, so signal success.\n",
                "/opt/aws/bin/cfn-signal -e 0 -r \"AWS CodeDeploy Agent setup complete.\" '",
                {
                  "Ref": "WaitHandle"
                },
                "'\n"
              ]
            ]
          }
        }
      }
    },
    "BlueGreenAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "BlueGreenLaunchConfiguration"
        },
        "LoadBalancerNames": [
          {
            "Ref": "ClassicLoadBalancer"
          }
        ],
        "MaxSize": {
          "Ref": "InstanceCount"
        },
        "MinSize": {
          "Ref": "InstanceCount"
        },
        "DesiredCapacity": {
          "Ref": "InstanceCount"
        },
        "VPCZoneIdentifier": { "Ref": "Subnets" }
        
      }
    }
  },
  "Outputs": {
    "ServiceRoleName": {
      "Value": {
        "Ref": "CodeDeployTrustRole"
      }
    },
    "ServiceRoleARN": {
      "Value": {
        "Fn::GetAtt": [
          "CodeDeployTrustRole",
          "Arn"
        ]
      }
    },
    "AutoScalingGroupName": {
      "Value": {
        "Ref": "BlueGreenAutoScalingGroup"
      }
    },
    "LoadBalancerName": {
      "Value": {
        "Ref": "ClassicLoadBalancer"
      }
    }
  }
}